// see if this can be moved into external file, I dont see how right now, since we need to return
// int for do_input_redirection
// but also need to return saved_stin

#include "../include/Header.h"

/*
 * returns 0 on success
 * returns -1 if args 0 1 or 2 is NULL or if args1 is not <
 * returns 1 on dup2 error
 * */

int input_redirection(char **args)
{
/*
     * input redirection -> < function
     * this function works directly with stdin, and changes the stdin, to the
     * file content the user wants to redirect. It basically duplicates the
     * file content into stdin, 'replacing' the old stdin,
     * */

    int saved_stdin = dup(STDIN_FILENO);
    int do_input_redirection = 0;
    int fd_in = 0;

    // FIX: This exits the shell, return 0 
    if (args[0] != NULL && args[1] != NULL && args[2] != NULL && strcmp("<", args[1]) == 0) {
        char *filename = args[2];
        FILE        *file = fopen(filename, "r");

        assert(file != NULL);

        if (feof(file) || ferror(file)) {
            perror("oshell: fread() failed");
            exit(EXIT_FAILURE);
        }

        // open filebased pipeline channel for file 'filename' in read only
        fd_in = open(filename, O_RDONLY);
        assert(fd_in != 0); // 0 = stdin | 1 = stdout | 2 = stderr

        close(STDIN_FILENO); // we close stdin
        // we duplicate fd, into stdin
        if (dup2(fd_in, STDIN_FILENO) == -1) {
            perror("oshell: dup2 error");
            close(fd_in);
            return 1;
        }
        args[1] = NULL; // remove '<' from the command

        do_input_redirection = 1;
        return 0;
    }
    return 1;
}
